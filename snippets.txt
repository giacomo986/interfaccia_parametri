import Spreadsheet
sheet = App.ActiveDocument.addObject("Spreadsheet::Sheet")
sheet.Label = "Dimensions"


App.getDocument("ciambella").saveAs(u"/home/giacomo/prova.FCStd")

mysql -h 172.17.0.2 -u freecad -p DBTubi

App.activeDocument().saveAs(u"/home/giacomo/puzzone.FCStd")


'''
def scriviCSV(PercorsoFile):
    with open(PercorsoFile, "w", newline="") as csvfile:
        writer = csv.writer(csvfile, delimiter=",")
        writer.writerow(["Rifer
class LineEdit_Expr(QtWidgets.QLineEdit):

    '''def focusInEvent(self, event):
        print('focus in event')
        # do custom stuff
        super(LineEdit, self).focusInEvent(event)'''
    
    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key_Enter or event.key() == QtCore.Qt.Key_Return:
            #print("Premuto tasto invio")
            self.risolvi_espressione()
        QtWidgets.QLineEdit.keyPressEvent(self, event)

    '''def focusOutEvent(self, event):
        print('focus out event')
        # do custom stuff
        super(LineEdit, self).focusOutEvent(event)'''
    
    def risolvi_espressione(self):
        try:
            espressione = Expression(self.text())
            self.setText(str(espressione()))
        except:
            print("errore nella risoluzione della espressione. Assicurarsi che sia scritta in modo corretto senza caratteri estranei.")

                        ["Materiale"] +
                        ["Denominazione profilo"] +
                        ["Data di creazione"] +
                        ["Nome"] +
                        ["Codice"] +
                        ["Cliente"] +
                        ["Q.tà per Disegno"] +
                        ["Misura di massima"] +
                        ["Massa"])

        writer.writerow([ui.lineEdit_Riferimento.text()] +
                        [ui.lineEdit_CodicePadre.text()] +
                        [ui.lineEdit_Macchina.text()] +
                        [ui.comboBox_Materiale.currentText()] +
                        [ui.comboBox_Denominazione.currentText()] +
                        [ui.DateTimeEdit_Data.dateTime().toPython().strftime("%Y-%m-%d %H:%M:%S")] +
                        [ui.lineEdit_Nome.text()] +
                        [ui.lineEdit_Codice.text()] +
                        [ui.comboBox_Cliente.currentText()] +
                        [ui.lineEdit_Quantita.text()] +
                        [ui.comboBox_MisuraMax.currentData()] +
                        [ui.lineEdit_Massa.text()])'''

App.getDocument('Senza_nome').copyObject(App.getDocument('Tronco_di_cono').getObject('Cone'), True)




$ docker exec some-mysql sh -c 'exec mysqldump --all-databases -uroot -p"$MYSQL_ROOT_PASSWORD"' > /home/giacomo/all-databases.sql
docker exec mariadbtest sh -c 'exec mysqldump -p DBTubi -uroot -p"$MYSQL_ROOT_PASSWORD"' > /home/giacomo/DBtubi.sql


$ docker exec -i some-mysql sh -c 'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD"' < /home/giacomo/all-databases.sql


App.activeDocument().addObject('TechDraw::DrawPage','Page')
App.activeDocument().addObject('TechDraw::DrawSVGTemplate','Template')
App.activeDocument().Template.Template = '/usr/share/freecad-daily/Mod/TechDraw/Templates/A4_LandscapeTD.svg'
App.activeDocument().Page.Template = App.activeDocument().Template

App.activeDocument().addObject('TechDraw::DrawProjGroup','ProjGroup')
App.activeDocument().Page.addView(App.activeDocument().ProjGroup)
App.activeDocument().ProjGroup.addProjection('Front')
App.activeDocument().ProjGroup.Anchor.Direction = FreeCAD.Vector(0.000,0.000,1.000)
App.activeDocument().ProjGroup.Anchor.RotationVector = FreeCAD.Vector(1.000,0.000,0.000)
App.activeDocument().ProjGroup.Anchor.XDirection = FreeCAD.Vector(1.000,0.000,0.000)
App.activeDocument().ProjGroup.Anchor.recompute()
App.ActiveDocument.recompute()
### End command TechDraw_ProjectionGroup

App.activeDocument().ProjGroup.addProjection('Left')
App.activeDocument().ProjGroup.addProjection('Top')
App.activeDocument().ProjGroup.addProjection('Left')

INSERT INTO joke(joke_text, joke_date, author_id)
    -> VALUES (‘Humpty Dumpty had a great fall.’, ‘1899–03–13’, (SELECT id FROM author WHERE author_name = ‘Famous Anthony’));
 Query OK, 1 row affected (0.03 sec)


Esempio Evente key:

import sys
from PyQt5.QtWidgets import (QApplication, QWidget)
from PyQt5.Qt import Qt

class MainWindow(QWidget):
	def __init__(self):
		super().__init__()
		
	def keyPressEvent(self, event):
		print(event.key())
		if event.key() == Qt.Key_Space:
			self.test_method()

	def test_method(self):
		print('Space key pressed')

if __name__ == '__main__':
	app = QApplication(sys.argv)

	demo = MainWindow()
	demo.show()

	sys.exit(app.exec_())



class LineEdit_Expr(QtWidgets.QLineEdit):

    '''def focusInEvent(self, event):
        print('focus in event')
        # do custom stuff
        super(LineEdit, self).focusInEvent(event)'''
    
    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key_Enter or event.key() == QtCore.Qt.Key_Return:
            #print("Premuto tasto invio")
            self.risolvi_espressione()
        QtWidgets.QLineEdit.keyPressEvent(self, event)

    '''def focusOutEvent(self, event):
        print('focus out event')
        # do custom stuff
        super(LineEdit, self).focusOutEvent(event)'''
    
    def risolvi_espressione(self):
        try:
            espressione = Expression(self.text())
            self.setText(str(espressione()))
        except:
            print("errore nella risoluzione della espressione. Assicurarsi che sia scritta in modo corretto senza caratteri estranei.")


Gui.SendMsgToActiveView("Save")